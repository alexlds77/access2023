>>> generate overlay mapping:
REF -> DSI [0]  [0, 5, 0, 0, 0] [5, 5, 1, 0, 1]
DSI -> MS1 [0]* [5, 5, 1, 0, 1] [15, 5, 7, 0, 3]
MS1 -> REF [a]
REF -> DSI [1]  [5, 5, 0, 1, 1] [10, 5, 1, 1, 2]
DSI -> MS2 [1]* [10, 5, 1, 1, 2] [15, 5, 8, 1, 3]
MS2 -> REF [b]
REF -> DSI [2]  [10, 5, 0, 2, 2] [15, 5, 1, 2, 3]
DSI -> MS3 [2]* [15, 5, 1, 2, 3] [25, 5, 9, 2, 5]
MS3 -> MS1 [c]
MS1 -> DSO [0]  [15, 5, 7, 0, 3] [20, 5, 14, 0, 4]
DSO -> MS2 [d]
MS2 -> DSO [1]  [15, 5, 8, 1, 3] [25, 5, 14, 1, 5]
DSO -> DSO [e]
DSO -> REF [0]  [20, 5, 14, 0, 4] [25, 0, 0, 0, 5]
MS3 -> DSO [2]  [25, 5, 9, 2, 5] [30, 5, 14, 2, 6]
DSO -> DSO [f]
DSO -> REF [1]  [25, 5, 14, 1, 5] [30, 0, 0, 1, 6]
DSO -> REF [2]  [30, 5, 14, 2, 6] [35, 0, 0, 2, 7]
overlap idx: []
there is no overlap!

>>> apply the serializer filter
>>> apply the pruning filter

>>> generate overlay mapping:
REF -> DSI [0]  [0, 5, 0, 0, 0] [5, 5, 1, 0, 1]
DSI -> MS1 [0]* [5, 5, 1, 0, 1] [15, 5, 7, 0, 3]
MS1 -> REF [a]
REF -> DSI [1]  [5, 5, 0, 1, 1] [10, 5, 1, 1, 2]
DSI -> MS2 [1]* [10, 5, 1, 1, 2] [15, 5, 8, 1, 3]
MS2 -> REF [b]
REF -> DSI [2]  [10, 5, 0, 2, 2] [15, 5, 1, 2, 3]
DSI -> MS3 [2]* [15, 5, 1, 2, 3] [25, 5, 9, 2, 5]
MS3 -> MS1 [c]
MS1 -> DSO [0]  [15, 5, 7, 0, 3] [20, 5, 14, 0, 4]
DSO -> MS2 [d]
MS2 -> DSO [1]  [15, 5, 8, 1, 3] [25, 5, 14, 1, 5]
DSO -> DSO [e]
DSO -> REF [0]  [20, 5, 14, 0, 4] [25, 0, 0, 0, 5]
MS3 -> DSO [2]  [25, 5, 9, 2, 5] [30, 5, 14, 2, 6]
DSO -> DSO [f]
DSO -> REF [1]  [25, 5, 14, 1, 5] [30, 0, 0, 1, 6]
DSO -> REF [2]  [30, 5, 14, 2, 6] [35, 0, 0, 2, 7]
overlap idx: []
there is no overlap!

Optimal Schedule Length: 35
12.28857421875
[0, 5, 0, 0, 0]
[5, 5, 1, 0, 1]
[5, 5, 0, 1, 1]
[10, 5, 1, 1, 2]
[10, 5, 0, 2, 2]
[15, 5, 1, 2, 3]
[15, 5, 7, 0, 3]
[15, 5, 8, 1, 3]
[20, 5, 14, 0, 4]
[25, 0, 0, 0, 5]
[25, 5, 9, 2, 5]
[25, 5, 14, 1, 5]
[30, 0, 0, 1, 6]
[30, 5, 14, 2, 6]
[35, 0, 0, 2, 7]

